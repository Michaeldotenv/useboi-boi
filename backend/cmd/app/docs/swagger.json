{
    "swagger": "2.0",
    "info": {
        "description": "Boiboi API Documentation.",
        "title": "Boiboi Backend API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/api",
    "paths": {
        "/admin/deliveryServices": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch a list of delivery services, optionally filtered by status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get delivery services",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Status filter",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of delivery services",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/data.DeliveryService"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid filter or parameters",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/admin/deliveryServices/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific delivery service using its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get a delivery service by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delivery Service ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.DeliveryService"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or No Delivery Service Found",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/admin/orders": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all orders with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all orders",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "additionalProperties": true
                                    }
                                },
                                "page": {
                                    "type": "integer"
                                },
                                "pageSize": {
                                    "type": "integer"
                                },
                                "totalCount": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/orders/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a single order with full details by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get an order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/store/{id}/inventories": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Admin adds a new item to a store's inventory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin",
                    "Inventories"
                ],
                "summary": "Add item to store inventory (Admin)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Item object",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.Item"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/data.Item"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/admin/stores": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch a list of stores, optionally filtered by status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get a list of stores",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Status filter",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of stores",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/data.Store"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/admin/stores/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch a single store using the provided ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get a store by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Store details",
                        "schema": {
                            "$ref": "#/definitions/data.Store"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or store not found",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/auth/admin/login": {
            "post": {
                "description": "Allows admin to log in using their admin key and receive a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Admin login and JWT token generation",
                "parameters": [
                    {
                        "description": "Admin login request body",
                        "name": "adminLoginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.AdminLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token",
                        "schema": {
                            "$ref": "#/definitions/data.JWTResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or wrong admin key",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/auth/forgotPassword": {
            "post": {
                "description": "Send password reset link to user's email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Request password reset",
                "parameters": [
                    {
                        "description": "Email address for password reset",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.EmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset email sent successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid email format",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error - user not found or email sending failed",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user with email and password, return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful with JWT token and user data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid credentials or rider not approved",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/auth/merchantSignup": {
            "post": {
                "description": "Register a new merchant account with store information and email verification via OTP",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new merchant account",
                "parameters": [
                    {
                        "description": "Merchant registration details including store information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.MerchantSignupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - validation error or email already exists",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/auth/resetPassword": {
            "post": {
                "description": "Reset user password using email and reset token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "description": "Password reset details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid request format",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error - invalid token or user not found",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/auth/riderSignup": {
            "post": {
                "description": "Register a new rider account with delivery service code and email verification via OTP",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new rider account",
                "parameters": [
                    {
                        "description": "Rider registration details including delivery service code",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.RiderSignupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - validation error or email already exists",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Register a new base user account with email verification via OTP",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user account",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - validation error or email already exists",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/auth/verifyMerchantSignup": {
            "post": {
                "description": "Verify the OTP code sent to merchant's email and complete the registration process including store creation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify merchant signup with OTP",
                "parameters": [
                    {
                        "description": "OTP verification details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.OtpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Merchant and store created successfully with JWT token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid OTP or validation error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/auth/verifyRiderSignup": {
            "post": {
                "description": "Verify the OTP code sent to rider's email and complete the registration process",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify rider signup with OTP",
                "parameters": [
                    {
                        "description": "OTP verification details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.OtpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rider created successfully with JWT token or pending status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid OTP or validation error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/auth/verifySignup": {
            "post": {
                "description": "Verify the OTP code sent to user's email and complete the registration process",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify user signup with OTP",
                "parameters": [
                    {
                        "description": "OTP verification details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.OtpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully with JWT token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid OTP or validation error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/deliveryServices/{id}": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the status of a delivery service based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update delivery service status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeliveryService ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "DeliveryService status update request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.DeliveryService"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated delivery service",
                        "schema": {
                            "$ref": "#/definitions/data.DeliveryService"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/inventories/categories/": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new category for a store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventories"
                ],
                "summary": "Create a new category",
                "parameters": [
                    {
                        "description": "Category object",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.Category"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/data.Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/inventories/items/": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a new item to a store's inventory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventories"
                ],
                "summary": "Add item to store inventory",
                "parameters": [
                    {
                        "description": "Item object",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.Item"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/data.Item"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/inventories/items/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete an item from a store's inventory by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inventories"
                ],
                "summary": "Remove item from store inventory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/data.Error"
                        }
                    }
                }
            }
        },
        "/stores/{id}": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the status of a store based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update store status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Store status update request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.StoreUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated store",
                        "schema": {
                            "$ref": "#/definitions/data.Store"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/vendors": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all active vendors",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "Get all vendors",
                "responses": {
                    "200": {
                        "description": "List of active vendors",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/data.Store"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to decode stores",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/vendors/image": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the image of a specific store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "Update store image",
                "parameters": [
                    {
                        "description": "Store image update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/vendors.StoreImageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated store image",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or failed to create upload request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/vendors/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a single vendor by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "Get a vendor by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vendor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vendor object",
                        "schema": {
                            "$ref": "#/definitions/data.Store"
                        }
                    },
                    "400": {
                        "description": "Invalid vendor ID",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Error fetching store",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing vendor's information by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Vendors"
                ],
                "summary": "Update a vendor by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Vendor ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Vendor update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/data.Store"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated vendor object",
                        "schema": {
                            "$ref": "#/definitions/data.Store"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or invalid vendor ID",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Failed to update store",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "admin.AdminLoginRequest": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                }
            }
        },
        "admin.StoreUpdate": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "auth.EmailRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "auth.ResetRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "newPassword123"
                },
                "token": {
                    "type": "string",
                    "example": "abc123"
                }
            }
        },
        "data.Assignment": {
            "type": "object",
            "properties": {
                "account_type": {
                    "type": "string"
                },
                "assigned_at": {
                    "type": "string"
                },
                "assignee_id": {
                    "type": "integer"
                },
                "assignee_type": {
                    "type": "string"
                },
                "expired": {
                    "type": "boolean"
                },
                "integration": {
                    "type": "integer"
                }
            }
        },
        "data.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "storeId": {
                    "type": "string"
                }
            }
        },
        "data.Customer": {
            "type": "object",
            "properties": {
                "customer_code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "risk_action": {
                    "type": "string"
                }
            }
        },
        "data.DeliveryService": {
            "type": "object",
            "properties": {
                "adminId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "signupCode": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "virtualBankAccount": {
                    "$ref": "#/definitions/data.VirtualBankAccount"
                }
            }
        },
        "data.Error": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "data.Item": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "categoryId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "currentInventory": {
                    "type": "integer"
                },
                "desc": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "status": {
                    "description": "active, deleted, inactive",
                    "type": "string"
                },
                "storeId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "data.JWTResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "data.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "data.MerchantSignupRequest": {
            "type": "object",
            "properties": {
                "confirmPassword": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "nameOfStore": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "storeDescription": {
                    "type": "string"
                }
            }
        },
        "data.OtpRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "data.RiderSignupRequest": {
            "type": "object",
            "properties": {
                "confirmPassword": {
                    "type": "string"
                },
                "deliveryServiceCode": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "data.SignupRequest": {
            "type": "object",
            "properties": {
                "confirmPassword": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "data.Store": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "availableDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "closingTime": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "likedByUserIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mapLocation": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "openingTime": {
                    "type": "string"
                },
                "ratings": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "data.VirtualBankAccount": {
            "type": "object",
            "properties": {
                "account_name": {
                    "type": "string"
                },
                "account_number": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                },
                "assigned": {
                    "type": "boolean"
                },
                "assignment": {
                    "$ref": "#/definitions/data.Assignment"
                },
                "balance": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/data.Customer"
                },
                "id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "vendors.StoreImageRequest": {
            "type": "object",
            "required": [
                "image",
                "storeId"
            ],
            "properties": {
                "image": {
                    "type": "string"
                },
                "storeId": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}